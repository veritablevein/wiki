created: 20230809071411984
modified: 20230809071725222
tags: JavaScript
title: JS加法运算符
type: text/vnd.tiddlywiki

加法运算符（`+`）为两种不同的运算重载：数字加法和字符串连接。在求值时，它首先<a >将两个操作数强制转换为基本类型</a>。然后，检查两个操作数的类型：

* 如果有一方是字符串，另一方则会被<a >转换为字符串</a>，并且它们连接起来。
* 如果双方都是 <a >BigInt</a>，则执行 BigInt 加法。如果一方是 BigInt 而另一方不是，会抛出 <a >`TypeError`</a>。
* 否则，双方都会被<a >转换为数字</a>，执行数字加法。

字符串连接经常被认为等价于<a >模板字符串</a>或者 <a >`String.prototype.concat()`</a>，但并非如此。加法强制将表达式转为//基本类型//，它优先调用 <a >`valueOf()`</a>；另一方面，模板字符串和 `concat()` 则强制将表达式转为//字符串//，它们优先调用 <a >`toString()`</a>。如果表达式有 <a >`@@toPrimitive`</a> 方法，字符串连接时会用 `"default"` 作为 `hint` 调用它，然而模板字符串则用 `"string"`。这对于具有不同的字符串和原始值表现的对象来说很重要——例如 <a >Temporal</a>，它的 `valueOf()` 方法会抛出错误。

```JavaScript
const t = Temporal.Now.instant();
"" + t; // 抛出 TypeError
`${t}`; // '2022-07-31T04:48:56.113918308Z'
"".concat(t); // '2022-07-31T04:48:56.113918308Z'
```