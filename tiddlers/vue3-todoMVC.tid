created: 20220626154036471
creator: TidGiUser
modified: 20220627094809249
modifier: TidGiUser
tags: Vue 项目
title: vue3-todoMVC
type: text/vnd.tiddlywiki
wysiwyg: yes

pnpm初始化vite环境

# git clone [ext[https://github.com/tastejs/todomvc-app-template.git]]
# pnpm create vite@latest
# project-name vue vue/ts 
# pnpm install -D todomvc-app-css todomvc-common
# 清空App.vue删除其他文件，将模板index.html body内容放入App.vue的template中
# App.vue中style导入@import

! 需求分析

# 事项列表显示
## v-for创建li，配合:key=todo.id使用
## label内容为todo.title
# 状态信息显示
## 剩余个数 计算属性 remaining：todos.filter(todo => !todo.completed).length
## 个数单位 pluralize(word)：word + (remaining === 1 ? '' : 's')
# 事项状态切换
## 通过:class绑定complete类控制完成状态
## 通过事项复选框双向绑定todo.completed控制是否勾选
## 全选框双向绑定计算属性allDone get方法根据剩余个数判断复选框是否为全选状态：剩余0为全选
## allDone set方法控制复选框全选全不选功能：遍历todos，让每一个todo.completed的值和全选框状态一致
# 事项新增
## 顶部输入框双向绑定newTodo
## 回车按键事件addTodo新增事项
### 去除newTodo首尾空格：value = newTodo.trim()
### 处理后为空直接return：if (!value) return
### 新增事项：todos.push({id: todos.length + 1, title: newTodo, completed: false})
### 清空输入框：newTodo = ''
# 事项删除
## 删除按钮绑定删除事件removeTodo(todo)
### 通过todos.indexof(todo)获取index
### todos.splice(index, 1)删除对应事项
## 删除已完成的事项
### v-show控制显示按钮，只有remaining = todos.length时不显示：v-show="todos.length > remaining"
### 绑定按钮点击事件removeCompleted，用未完成过滤后的todos赋值给原来的todos：todos = todos.filter(todo => !todo.completed)
# 事项编辑
## 双击事件editTodo(todo)显示编辑框并聚焦（通过editing和edit类控制）
### li绑定editing类控制隐藏，显示输入框：:class = "{editing: todo === editingTodo}"
### 输入框双向绑定todo.title，创建自定义指令v-todo-focus完成双击后自动聚焦
### 控制显示输入框：editingTood = todo
### 保存todo.title供取消还原使用：titleBeforeEdit = todo.title
## esc按键绑定cancelEdit(todo)，取消编辑：@keyup.esc = "cancelEdit(todo)"
### 清空输入框并隐藏：editingTodo = null
### 还原事项内容：todo.title = titleBeforeEdit.trim
## enter按键和失去焦点绑定editDone(todo)：@keyup.enter="editDone(todo)" @blur="editDone(todo)"
### 防止enter触发后自动触发blur多次删除，判断输入框是否已经隐藏：if (!editingTodo) return
### 清空输入框并隐藏：editingTodo = null
### 输入内容首尾去空格：todo.title = todo.title.trim()
### 内容为空则删除该todo：if (!todo.title) removeTodo(todo)
# 事项筛选
## 创建filters：let filters = {all(todos){return todos}, active(todos){return todos.filter(todo => !todo.completed)}, completed(todos){return todos.filter(todo => todo.completed)}}
## 根据todoType生成计算属性filterTodos：() => {filters.[todoType](todos)}
## 用filterTodos替换v-for中的todos
# 事项数据持久化
## 创建todoStorage，根据TODO_KEY获取和本地存储todos：


