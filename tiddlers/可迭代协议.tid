created: 20221109061037694
creator: TidGiUser
modified: 20221109065311707
modifier: TidGiUser
tags: 迭代协议
title: 可迭代协议
type: text/vnd.tiddlywiki

! 形式
* 形式：Object
** 方法：[Symbol.iterator]()，无参
*** 语义：生成迭代器函数，为该容器生成迭代元素的迭代器
*** 返回值：Object
**** 形式：符合[[迭代器协议]]的对象

! 用法
!! 可迭代对象
```JavaScript
// 创建一个迭代器对象来访问数组
const iterableObj = {
  names: ["abc", "cba", "nba"],
  [Symbol.iterator]: function() {
    let index = 0
    return {
      next: () => {
        if (index < this.names.length) {
          return { done: false, value: this.names[index++] }
        } else {
          return { done: true, value: undefined }
        }
      }
    }
  }
}

// iterableObj对象就是一个可迭代对象
console.log(iterableObj[Symbol.iterator])

// 1.第一次调用iterableObj[Symbol.iterator]函数
const iterator = iterableObj[Symbol.iterator]()
console.log(iterator.next())
console.log(iterator.next())
console.log(iterator.next())
console.log(iterator.next())

// // 2.第二次调用iterableObj[Symbol.iterator]函数
const iterator1 = iterableObj[Symbol.iterator]()
console.log(iterator1.next())
console.log(iterator1.next())
console.log(iterator1.next())
console.log(iterator1.next())

// 3.for...of可以遍历的东西必须是一个可迭代对象
// const obj = {
//   name: "why",
//   age: 18
// }

for (const item of iterableObj) {
  console.log(item)
}


```